#! /bin/bash
if [ $# != 1 ]
then
	printf "	Command Syntax:\n"
	printf "	    mk_secure_zimage <DDR_ADDR>\n"
	printf "	        DDR_ADDR : ddr address where zImage is copied to RAM by U-Boot\n"
	printf "	Please try again\n"
	exit
fi

let ddr_addr=$1

if [ ! -f zImage ]
then
	printf "File \"zImage\" does not exist. Copy it from u-boot directory and try again\n"
	exit 1
fi
printf "Make Sure Your \"zImage\" is up to date...\n"

# Calculate the size
let zimage_size=$(ls -lct zImage | awk '{print $5}')
let pad_len=$((zimage_size - zimage_size % 0x1000 + 0x1000)) # align to 0x1000
let auth_len=$((pad_len + 0x20)) # +0x20 "IVT"
let sig_len=$((auth_len + 0x2000))
let self_ptr=$((ddr_addr + pad_len))
let csf_ptr=$((ddr_addr + auth_len))
let jump_addr=$((ddr_addr + 0x1000))

# change value to hex string
pad_len=`printf "0x%X" ${pad_len}`
auth_len=`printf "0x%X" ${auth_len}`
sig_len=`printf "0x%X" ${sig_len}`
ddr_addr=`printf "0x%X" ${ddr_addr}`
self_ptr=`printf "0x%X" ${self_ptr}`
csf_ptr=`printf "0x%X" ${csf_ptr}`
jump_addr=`printf "0x%X" ${jump_addr}`

# Create habUimagegen
sed -e s/%pad_len%/${pad_len}/g -e s/%sig_len%/${sig_len}/g ../templates/habzimagegen_template > habZImageGen
chmod +x habZImageGen

# Create u-boot.csf
sed -e s/%ddr_addr%/${ddr_addr}/g -e s/%auth_len%/${auth_len}/g ../templates/zimagecsf_template > zImage.csf

# Create genIVT
sed -e s/%jump_addr%/${jump_addr}/g -e s/%self_ptr%/${self_ptr}/g -e s/%csf_ptr%/${csf_ptr}/g ../templates/genivt_template > genIVT
chmod +x genIVT

# Generate secure boot
./habZImageGen

# Remove temperory files
rm -f genIVT habZImageGen zImage.csf zImage-pad.bin ivt.bin zImage-pad-ivt.bin zImage_csf.bin zImage-signed.bin

# OK
printf "zImage with Signature \"zImage-signed-pad.bin\" is ready to use\n"
